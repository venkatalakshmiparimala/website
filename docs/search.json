[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Myself",
    "section": "",
    "text": "I have over seven years of experience in web development and database engineering, and my career has been built on a passion for creating high-quality, efficient solutions in dynamic work environments. I enjoy collaborating with teams and contributing to projects that solve real-world problems, especially in the areas of database design, scalable systems, and cloud-based architecture.\nI have experience in property management software development with Entrata India, where I worked within an Agile Scrum framework. I actively participated in sprint planning, project execution, and project management. I collaborated closely with cross-functional teams to deliver solutions that enhanced product performance and met client requirements. From optimizing SQL queries to developing scalable microservices, I consistently focused on improving system efficiency and addressing complex technical challenges.\nOne of the highlights of my experience was developing a microservices-based architecture that improved system scalability by 50%, and reduced deployment time by 30%, utilizing technologies such as Docker and Kubernetes. I was also deeply involved in migrating thousands of client documents from local servers to AWS cloud storage, which resolved critical storage limitations and ensured data security and accessibility.\nI led several database projects under the guidance of a database architect with 21 years of experience, gaining in-depth knowledge in database management and architecture design. Utilizing these skills, I contributed to building database structures for various projects and also served as a virtual database administrator for the product. In this role, I delivered multiple database optimization solutions to enhance product efficiency.\nIn addition to my technical expertise, I have worked on multiple projects in the affordable housing sector. I designed solutions for resident management, rental subsidy calculations, eligibility determination, and rent calculations. My contributions to the development of these systems ensured that they were reliable, secure, and user-friendly. I also worked on encrypting sensitive resident data ensuring full compliance with data protection standards.\n\n\n\n\nMicroservices Architecture Development: Spearheaded a project that improved scalability by 50% and reduced deployment times.\nAWS Cloud Migration: Led the migration of 40% of client documents from on-premises servers to AWS S3, solving critical storage challenges.\nIncome Limits Module Redesign: Redesigned the income limits module using automation with Python and OpenAI, resulting in more efficient data handling and improved eligibility calculations for affordable housing.\nSensitive Data Encryption: Worked on encrypting sensitive resident data across the entire database to ensure compliance with security standards.\nState-wise Certification Documents: Developed more than 56 state-specific certification documents for affordable housing using custom scripts and database integration."
  },
  {
    "objectID": "about.html#i-have-seven-years-of-experience-in-web-development-and-database-engineering-with-a-strong-focus-on-delivering-efficient-high-quality-solutions.-i-thrive-in-collaborative-and-challenging-environments-where-i-can-utilize-my-technical-skills-to-solve-problems-and-enhance-product-quality.-my-passion-lies-in-database-architecture-optimizing-sql-queries-and-developing-scalable-microservices-to-meet-diverse-client-needs.",
    "href": "about.html#i-have-seven-years-of-experience-in-web-development-and-database-engineering-with-a-strong-focus-on-delivering-efficient-high-quality-solutions.-i-thrive-in-collaborative-and-challenging-environments-where-i-can-utilize-my-technical-skills-to-solve-problems-and-enhance-product-quality.-my-passion-lies-in-database-architecture-optimizing-sql-queries-and-developing-scalable-microservices-to-meet-diverse-client-needs.",
    "title": "About",
    "section": "I have seven years of experience in web development and database engineering, with a strong focus on delivering efficient, high-quality solutions. I thrive in collaborative and challenging environments where I can utilize my technical skills to solve problems and enhance product quality. My passion lies in database architecture, optimizing SQL queries, and developing scalable microservices to meet diverse client needs.",
    "text": "I have seven years of experience in web development and database engineering, with a strong focus on delivering efficient, high-quality solutions. I thrive in collaborative and challenging environments where I can utilize my technical skills to solve problems and enhance product quality. My passion lies in database architecture, optimizing SQL queries, and developing scalable microservices to meet diverse client needs."
  },
  {
    "objectID": "about.html#at-entrata-india-db-xento-systems-i-was-actively-involved-in-agile-scrum-contributing-to-sprint-planning-estimation-and-execution-of-various-technical-projects.-my-work-ranged-from-developing-microservices-based-architecture-that-improved-system-scalability-by-50-to-migrating-client-documents-to-aws-helping-resolve-critical-storage-challenges.-additionally-i-worked-on-creating-robust-solutions-for-affordable-housing-including-rent-calculations-eligibility-management-and-secure-handling-of-residents-sensitive-data.",
    "href": "about.html#at-entrata-india-db-xento-systems-i-was-actively-involved-in-agile-scrum-contributing-to-sprint-planning-estimation-and-execution-of-various-technical-projects.-my-work-ranged-from-developing-microservices-based-architecture-that-improved-system-scalability-by-50-to-migrating-client-documents-to-aws-helping-resolve-critical-storage-challenges.-additionally-i-worked-on-creating-robust-solutions-for-affordable-housing-including-rent-calculations-eligibility-management-and-secure-handling-of-residents-sensitive-data.",
    "title": "About",
    "section": "At Entrata India (Db Xento Systems), I was actively involved in Agile Scrum, contributing to sprint planning, estimation, and execution of various technical projects. My work ranged from developing microservices-based architecture that improved system scalability by 50%, to migrating client documents to AWS, helping resolve critical storage challenges. Additionally, I worked on creating robust solutions for affordable housing, including rent calculations, eligibility management, and secure handling of residents’ sensitive data.",
    "text": "At Entrata India (Db Xento Systems), I was actively involved in Agile Scrum, contributing to sprint planning, estimation, and execution of various technical projects. My work ranged from developing microservices-based architecture that improved system scalability by 50%, to migrating client documents to AWS, helping resolve critical storage challenges. Additionally, I worked on creating robust solutions for affordable housing, including rent calculations, eligibility management, and secure handling of residents’ sensitive data."
  },
  {
    "objectID": "about.html#some-of-the-key-projects-i-handled-include",
    "href": "about.html#some-of-the-key-projects-i-handled-include",
    "title": "About",
    "section": "Some of the key projects I handled include:",
    "text": "Some of the key projects I handled include:\n\nDesigning a scalable microservices architecture, improving system performance and reducing deployment time.\n\n\nManaging the migration of client documents from servers to AWS cloud storage, ensuring smooth transitions and data integrity.\n\n\nRedesigning the income limits module for affordable housing, using OpenAI and Python to automate and optimize the process.\n\n\nEncrypting sensitive resident data such as SSNs and phone numbers across the entire database, ensuring compliance with data security standards.\n\n\nCurrently, I am pursuing a Master’s in Data Analytics Engineering at George Mason University to further enhance my skills and knowledge. I’m always looking to grow and apply what I learn to drive innovation and efficiency in my work."
  },
  {
    "objectID": "about.html#technical-skills",
    "href": "about.html#technical-skills",
    "title": "About",
    "section": "Technical Skills:",
    "text": "Technical Skills:\n\nDatabases: PostgreSQL, MySQL\n\n\nBackend Development: PHP, Python\n\n\nFrontend Technologies: AJAX, HTML, JavaScript, jQuery\n\n\nCloud Technologies: AWS, Docker, Kubernetes\n\n\nFrameworks: MVC, Singleton, Fusebox\n\n\nTools & Version Control: Jira, ClickUp, GIT, SVN"
  },
  {
    "objectID": "about.html#software-engineer-october-2018---august-2024",
    "href": "about.html#software-engineer-october-2018---august-2024",
    "title": "About Us",
    "section": "Software Engineer (October 2018 - August 2024)",
    "text": "Software Engineer (October 2018 - August 2024)\nIn this role, I focused on developing scalable solutions within the property management software sector. My key responsibilities included:\n\nDatabase Architecture and Optimization: Collaborated with cross-functional teams to build robust database structures and optimized SQL queries to enhance overall system efficiency.\nProduct Development: Created and deployed microservicable product which includes the improved system performance.\nClient Support: Delivering optimization solutions to enhance product performance and address client requirements.\nDatabase administration: Acted as a virtual database administrator and helped the team with various database solutions.\nProject Leading: Led various projects, contributing to project management and project support."
  },
  {
    "objectID": "about.html#associate-software-engineer-july-2017---september-2018",
    "href": "about.html#associate-software-engineer-july-2017---september-2018",
    "title": "About Us",
    "section": "Associate Software Engineer (July 2017 - September 2018)",
    "text": "Associate Software Engineer (July 2017 - September 2018)\nAs an Associate Software Engineer, I gained foundational skills in web development and database management. My contributions included:\n\nAgile Practices: Learned agile framework to deploy efficient projects, learned sprint deployment and retrospectives to ensure efficient project progress.\nTechnical Support: Provided troubleshooting assistance to resolve client issues, enhancing user experience.\nMentorship: Collaborated with senior engineers, learning advanced database management techniques and best practices."
  },
  {
    "objectID": "about.html#trainee-january-2017---june-2017",
    "href": "about.html#trainee-january-2017---june-2017",
    "title": "About Us",
    "section": "Trainee (January 2017 - June 2017)",
    "text": "Trainee (January 2017 - June 2017)\nIn this initial role, I focused on acquiring essential skills in software development and database management. My responsibilities included:\n\nTraining and Development: Engaged in training sessions with experienced engineers, laying the groundwork for my subsequent roles.\nProject Assistance: Assisted in various projects, contributing to code development and testing efforts.\n\n\nKey Projects\n\nMicroservices Architecture Development: Spearheaded a project that improved scalability by 50% and reduced deployment times.\nAWS Cloud Migration: Led the migration of 40% of client documents from on-premises servers to AWS S3, solving critical storage challenges.\nAutomated Data Import into the system: Redesigned a data module using automation with Python and OpenAI, to import 1,50,000 records every year resulting in more efficient data handling and improved eligibility calculations for affordable housing product.\nSensitive Data Encryption: Worked on encrypting sensitive resident data across the entire database to ensure compliance with security standards.\nDocument Creation automation: Developed more than 56 state-specific certification documents for affordable housing using custom scripts and database integration and automated the process of filling the certifications for every resident on certification process using object-oriented PHP, PostgreSQL, and Adobe techniques.\n\n\n\nTechnical Skills\n\nDatabases: PostgreSQL, MySQL\n\nBackend Development: PHP, Python\n\nFrontend Technologies: AJAX, HTML, JavaScript, jQuery\n\nCloud Technologies: AWS, Docker, Kubernetes\n\nFrameworks: MVC, Singleton, Fusebox\n\nAgile Tools: Jira, ClickUp\n\nVersion Control: GIT, SVN\n\n\n\nEducation\n\nMaster’s in Data Analytics Engineering\nGeorge Mason University, Virginia, USA (2024 - 2026)\nBachelor of Technology in Computer Science & Technology\nSree Venkateshwara College of Engineering, Nellore, India (2013 - 2017)"
  },
  {
    "objectID": "Visualization_project.html#running-code",
    "href": "Visualization_project.html#running-code",
    "title": "Re-Visualization Project",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n# Load required libraries\n\nsuppressWarnings({\n library(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)  \nlibrary(maps)\nlibrary(leaflet)\nlibrary(readr)\n\n  library(plotly)\n  library(dplyr)\n  library(viridis)  \n\n})\n\n\n# Load necessary libraries\nlibrary(dplyr)  # For data manipulation\nlibrary(leaflet)  # For creating interactive maps\nlibrary(rnaturalearth)  # For world map data\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Summarize the data to get the average suicide rate for each country\naverage_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE), .groups = \"drop\")  # Add .groups = \"drop\" to avoid warnings\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with average suicide rates\nworld_data &lt;- merge(world, average_suicide_rate, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for suicide rates\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$Average_Suicide_Rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nleaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(Average_Suicide_Rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"Average Suicide Rate: \", round(Average_Suicide_Rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~Average_Suicide_Rate, opacity = 0.7, title = \"Average Suicide Rate\", position = \"bottomright\") %&gt;%\n  addControl(\"&lt;strong&gt;Average Suicide Rates by Country&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n\n\n\n\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Calculate the overall average suicide rate for each year across all countries\nyearly_avg_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE))\n\n# Find the year with the highest overall average suicide rate\ntop_year &lt;- yearly_avg_suicide_rate %&gt;%\n  filter(Average_Suicide_Rate == max(Average_Suicide_Rate)) %&gt;%\n  pull(Year)\n\n# Filter the data to include only the data for the top year\ntop_year_data &lt;- suicide_data %&gt;%\n  filter(Year == top_year)\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with suicide rate data for the top year\nworld_data &lt;- merge(world, top_year_data, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for the suicide rates in the top year\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$suscide.rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nmap &lt;- leaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(suscide.rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"&lt;br&gt; Suicide Rate: \", round(suscide.rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~suscide.rate, opacity = 0.7, title = paste(\"Suicide Rate in\", top_year), position = \"bottomright\")%&gt;%\naddControl(\"&lt;strong&gt;Average Suicide Rates of all the ages by Country for the top rated year: 1982&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n# Show the map\nmap\n\n\n\n\n\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Calculate the average suicide rate for each year\navg_suicide_by_year &lt;- data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_suicide_rate = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\")\n\n# Step 2: Create the frequency polygon\nfrequency_polygon &lt;- ggplot(avg_suicide_by_year, aes(x = Year, y = Average_suicide_rate)) +\n  geom_line(stat = \"identity\", color = \"blue\", size = 1) +  # Line to connect data points\n  geom_point(color = \"red\") +  # Points for each year\n  labs(title = \"Average Suicide Rates by Year all over the world\", \n       x = \"Year\", \n       y = \"Average Suicide Rate per 100,000\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\"), \n    axis.title.x = element_text(face = \"bold\"), \n    axis.title.y = element_text(face = \"bold\")\n  )\n\n# Convert the frequency polygon to an interactive plot\ninteractive_frequency_polygon &lt;- ggplotly(frequency_polygon)\n\n# Show the interactive frequency polygon\ninteractive_frequency_polygon\n\n\n\n\n\n\n# Load required libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(readr)  # Ensure you have the readr library to read CSV files\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Find top 5 countries with highest average suicide rates\ntop_5_countries &lt;- data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(avg_suicide_rate = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\") %&gt;%\n  top_n(5, wt = avg_suicide_rate) %&gt;%\n  arrange(desc(avg_suicide_rate))\n\n# Step 2: Filter the original data to keep only the top 5 countries\ndata_top_countries &lt;- data %&gt;%\n  filter(Country %in% top_5_countries$Country)\n\n# Step 3: Find the top 5 unique years with highest suicide rates across all top countries\ntop_years &lt;- data_top_countries %&gt;%\n  arrange(desc(`suscide-rate`)) %&gt;%\n  distinct(Year, .keep_all = TRUE) %&gt;%  # Keep only unique years\n  slice_head(n = 5) %&gt;%  # Get top 5 unique years\n  pull(Year)  # Extract the years\n\n# Step 4: Filter the data for the top 5 countries and the selected top years\ntop_5_years_data &lt;- data_top_countries %&gt;%\n  filter(Year %in% top_years) %&gt;%\n  group_by(Country, Year) %&gt;%\n  summarise(`suscide-rate` = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\") %&gt;%\n  arrange(Country, desc(`suscide-rate`))  # Sort for final presentation\n\n# Step 5: Expand the custom color palette to match the number of unique years\nunique_years &lt;- length(unique(top_5_years_data$Year))\ncolor_palette &lt;- colorRampPalette(c(\"orange\", \"red\"))(unique_years)\n\n# Step 6: Create the plot using ggplot\nplot &lt;- ggplot(top_5_years_data, aes(x = Country, y = `suscide-rate`, fill = factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  coord_flip() +\n  scale_fill_manual(values = color_palette, name = \"Year\") +  # Use the custom palette\n  labs(title = \"Top 5 Years with Highest Suicide Rates in Top 5 Countries\", \n       x = \"Country\", \n       y = \"Suicide Rate per 100,000\") +\n  theme_minimal()\n\n# Step 7: Convert the plot to an interactive plot using plotly\n# Use sprintf to format the suicide rates to 2 decimal places in the tooltip\ninteractive_plot &lt;- ggplotly(plot) %&gt;%\n  style(hoverinfo = \"text\", \n        text = paste(\"Country: \", top_5_years_data$Country, \"&lt;br&gt;\",\n                     \"Year: \", top_5_years_data$Year, \"&lt;br&gt;\",\n                     \"Suicide Rate: \", sprintf(\"%.2f\", top_5_years_data$`suscide-rate`)))\n\n# Show the interactive plot\ninteractive_plot\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(rnaturalearth)\nlibrary(sf)\n\n# Read the data\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(rnaturalearth)\nlibrary(sf)\n\n# Read the data\ndata &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Clean column names for easier access\ncolnames(data) &lt;- c(\"Entity\", \"Code\", \"Year\", \n                    \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                    \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                    \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                    \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                    \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Filter for the 15-19 age group and calculate the sum of averages across all years for each country\ndata_summary &lt;- data %&gt;%\n  filter(!is.na(Death_rate_15_19)) %&gt;%\n  group_by(Entity) %&gt;%\n  summarise(Average_suscide_rate = sum(Death_rate_15_19, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  mutate(Average_suscide_rate = round(Average_suscide_rate, 2))  # Round to 2 decimals\n\n# Load the world map using the rnaturalearth package\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Join suicide data with the world map\nworld_data &lt;- world %&gt;%\n  left_join(data_summary, by = c(\"name\" = \"Entity\"))\n\n# Plot the map using ggplot with shades of red\np &lt;- ggplot(world_data) +\n  geom_sf(aes(fill = Average_suscide_rate, text = name), color = \"white\") +\n  scale_fill_gradient(low = \"#ffcccc\", high = \"#990000\", na.value = \"grey50\", \n                      name = \"Suicide Rate per 100,000\") +\n  theme_void() +\n  labs(title = \"Average Suicide Rates for Age 15-19 over the Years\")\n\n# Convert ggplot to an interactive plotly map\ninteractive_map &lt;- ggplotly(p, tooltip = c(\"text\", \"fill\"))\n\n# Show the interactive map\ninteractive_map\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Load the data\ndata &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Clean column names for easier access\ncolnames(data) &lt;- c(\"Entity\", \"Code\", \"Year\", \n                    \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                    \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                    \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                    \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                    \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Filter the data for the 15-19 age group and remove missing values\ndata_filtered &lt;- data %&gt;%\n  filter(!is.na(Death_rate_15_19))\n\n# Calculate the average suicide rate for each country across all years\navg_suicide_rate &lt;- data_filtered %&gt;%\n  group_by(Entity) %&gt;%\n  summarise(suscide_Rate = round(mean(Death_rate_15_19, na.rm = TRUE),2)) %&gt;%\n  arrange(desc(suscide_Rate))%&gt;%\n  top_n(20, suscide_Rate)\n\n\n\n# Create the bar plot with ggplot\nbar_plot &lt;- ggplot(avg_suicide_rate, aes(x = reorder(Entity, suscide_Rate), \n                                           y = suscide_Rate, \n                                           fill = suscide_Rate)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip coordinates to make country names readable\n  scale_fill_gradient(low = \"#ffcccc\", high = \"#990000\") +  # Light red to dark red gradient\n  labs(title = \"Average Suicide Rate for Age 15-19 (All Years)\", \n       x = \"Country\", \n       y = \"Average Suicide Rate per 100,000 Population\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8)) +  # Adjust text angle and size\n  theme(plot.margin = margin(10, 10, 10, 40))  # Adjust margins\n\n# Convert to an interactive plot with plotly\ninteractive_plot &lt;- ggplotly(bar_plot, tooltip = c(\"suscide_Rate\"))\n\n# Show the interactive plot\ninteractive_plot"
  },
  {
    "objectID": "revisualization_project.html#running-code",
    "href": "revisualization_project.html#running-code",
    "title": "Re-Visualization Project",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n# Load required libraries\n\n\nsuppressWarnings({\n  library(ggplot2)\n  library(plotly)\n  library(dplyr)\n  library(viridis)  \n\n})\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(maps)\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(maps)  # For world map data\n\n# Step 1: Load the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 2: Calculate the average suicide rate for each country and round it off to 2 decimal places\navg_suicide_by_country &lt;- data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_suicide_rate = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\")  # Round to 2 decimals\n\n# Step 3: Prepare the world map data\nworld_map &lt;- map_data(\"world\")\n\n# Step 4: Merge the average suicide data with the world map data\n# Make sure the country names match between the datasets (adjust if necessary)\nmap_data_combined &lt;- world_map %&gt;%\n  left_join(avg_suicide_by_country, by = c(\"region\" = \"Country\"))\n\n# Step 5: Create the map with ggplot\nmap_plot &lt;- ggplot(map_data_combined, aes(x = long, y = lat, group = group, fill = Average_suicide_rate)) +\n  geom_polygon(color = \"black\") +  # Draw country borders\n  scale_fill_gradient(low = \"lightcoral\", high = \"darkred\", na.value = \"grey50\", name = \"Avg Suicide Rate per 100,000\") +\n  labs(title = \"Average Suicide Rates by Country (1960-2022)\", \n       subtitle = \"Based on available data for all years\",\n       x = \"Longitude\", \n       y = \"Latitude\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\"),\n    plot.subtitle = element_text(face = \"italic\"),\n    legend.position = \"bottom\"\n  )\n\n# Step 6: Convert to an interactive plot with plotly\ninteractive_map &lt;- ggplotly(map_plot, tooltip = c(\"region\", \"fill\"))\n\n# Show the interactive map\ninteractive_map\n\n\n\n\n\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Filter data for the year 2010 and calculate the average suicide rate for each country\navg_suicide_by_country_2010 &lt;- data %&gt;%\n  filter(Year == 2010) %&gt;%  # Filter for the year 2010\n  group_by(Country) %&gt;%\n  summarise(Average_suicide_rate = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\")  # Round to 2 decimals\n\n# Step 2: Prepare the world map data\nworld_map &lt;- map_data(\"world\")\n\n# Step 3: Merge the average suicide data for 2010 with the world map data\nmap_data_combined &lt;- world_map %&gt;%\n  left_join(avg_suicide_by_country_2010, by = c(\"region\" = \"Country\"))\n\n# Step 4: Create the map with ggplot\nmap_plot &lt;- ggplot(map_data_combined, aes(x = long, y = lat, group = group, fill = Average_suicide_rate)) +\n  geom_polygon(color = \"black\") +  # Draw country borders\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\", na.value = \"grey50\", name = \"Average Suicide Rate per 100,000\") +\n  labs(title = \"Average Suicide Rates by Country in 2010\", \n       subtitle = \"Based on data for the year 2010\",\n       x = \"Longitude\", \n       y = \"Latitude\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\"),\n    plot.subtitle = element_text(face = \"italic\"),\n    legend.position = \"bottom\"\n  )\n\n# Step 5: Convert to an interactive plot with plotly and set the width and height in ggplotly()\ninteractive_map &lt;- ggplotly(map_plot, tooltip = c(\"region\", \"Average_suicide_rate\"))\n\n# Show the interactive map\ninteractive_map\n\n\n\n\n\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Calculate the average suicide rate for each year\navg_suicide_by_year &lt;- data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_suicide_rate = mean(`suscide-rate`, na.rm = TRUE), .groups = \"drop\")\n\n# Step 2: Create the frequency polygon\nfrequency_polygon &lt;- ggplot(avg_suicide_by_year, aes(x = Year, y = Average_suicide_rate)) +\n  geom_line(stat = \"identity\", color = \"blue\", size = 1) +  # Line to connect data points\n  geom_point(color = \"red\") +  # Points for each year\n  labs(title = \"Average Suicide Rates by Year all over the world\", \n       x = \"Year\", \n       y = \"Average Suicide Rate per 100,000\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\"), \n    axis.title.x = element_text(face = \"bold\"), \n    axis.title.y = element_text(face = \"bold\")\n  )\n\n# Convert the frequency polygon to an interactive plot\ninteractive_frequency_polygon &lt;- ggplotly(frequency_polygon)\n\n# Show the interactive frequency polygon\ninteractive_frequency_polygon\n\n\n\n\n\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Find top 5 countries with highest average suicide rates\ntop_5_countries &lt;- data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(avg_suicide_rate = mean(`suscide-rate`, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  top_n(5, wt = avg_suicide_rate) %&gt;%\n  arrange(desc(avg_suicide_rate))\n\n# Step 2: Filter the original data to keep only the top 5 countries\ndata_top_countries &lt;- data %&gt;%\n  filter(Country %in% top_5_countries$Country)\n\n# Step 3: For each of the top 5 countries, find the top 5 years with highest suicide rates\ntop_5_years &lt;- data_top_countries %&gt;%\n  group_by(Country) %&gt;%\n  top_n(5, wt = `suscide-rate`) %&gt;%\n  arrange(Country, desc(`suscide-rate`))\n\n# Step 4: Create a color palette using viridis\nunique_years &lt;- unique(top_5_years$Year)\ncolor_palette &lt;- viridis::viridis(length(unique_years))  # Generate a palette for the unique years\n\n# Step 5: Create the plot using ggplot\nplot &lt;- ggplot(top_5_years, aes(x = Country, y = `suscide-rate`, fill = factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  coord_flip() +\n  scale_fill_manual(values = color_palette, name = \"Year\") +  # Use the viridis palette\n  labs(title = \"Top 5 Years with Highest Suicide Rates in Top 5 Countries\", \n       x = \"Country\", \n       y = \"Suicide Rate per 100,000\") +\n  theme_minimal()\n\n# Step 6: Convert the plot to an interactive plot using plotly\n# Create custom tooltip information using the original data\ninteractive_plot &lt;- ggplotly(plot) %&gt;%\n  style(hoverinfo = \"text\", \n        text = paste(\"Country: \", top_5_years$Country, \"&lt;br&gt;\",\n                     \"Year: \", top_5_years$Year, \"&lt;br&gt;\",\n                     \"Suicide Rate: \", top_5_years$`suscide-rate`))\n\n# Show the interactive plot\ninteractive_plot\n\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(sf)\n\n# Load the data\ndata &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Clean column names for easier access\ncolnames(data) &lt;- c(\"Entity\", \"Code\", \"Year\", \n                    \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                    \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                    \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                    \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                    \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Filter for the 15-19 age group and the most recent year\ndata_filtered &lt;- data %&gt;%\n  filter(!is.na(Death_rate_15_19)) %&gt;%\n  group_by(Entity) %&gt;%\n  filter(Year == max(Year))  # Choose the most recent year for each country\n\n# Load the world map using the rnaturalearth package\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Join suicide data with the world map\nworld_data &lt;- world %&gt;%\n  left_join(data_filtered, by = c(\"name\" = \"Entity\"))\n\n# Round the death rate to 2 decimal places\nworld_data$Death_rate_15_19 &lt;- round(world_data$Death_rate_15_19, 2)\n\n# Plot the interactive map using ggplot and plotly\np &lt;- ggplot(world_data) +\n  geom_sf(aes(fill = Death_rate_15_19, text = name), color = \"white\") +\n  scale_fill_viridis_c(option = \"C\", na.value = \"grey50\") +\n  theme_void() +\n  labs(fill = \"Suicide Rate\",\n       title = \"Suicide Rates for Age 15-19 (Most Recent Year)\")\n\n# Convert ggplot to an interactive plotly map, rounding fill values to 2 decimals\ninteractive_map &lt;- ggplotly(p, tooltip = c(\"text\", \"fill\")) %&gt;%\n  layout(hoverlabel = list(\n    namelength = 0,  # Ensure full name is shown\n    format = \".2f\"   # Display the fill values with 2 decimals in tooltips\n  ))\n\n# Show the interactive map\ninteractive_map\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)  # For interactive plots\n\n# Load the data\ndata &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Clean column names for easier access\ncolnames(data) &lt;- c(\"Entity\", \"Code\", \"Year\", \n                    \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                    \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                    \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                    \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                    \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Filter the data for the 15-19 age group and remove missing values\ndata_filtered &lt;- data %&gt;%\n  filter(!is.na(Death_rate_15_19))\n\n# Calculate the average suicide rate for each country across all years, rounded to 2 decimals\navg_suicide_rate &lt;- data_filtered %&gt;%\n  group_by(Entity) %&gt;%\n  summarise(Avg_Death_rate_15_19 = round(mean(Death_rate_15_19, na.rm = TRUE), 2)) %&gt;%\n  arrange(desc(Avg_Death_rate_15_19))\n\navg_suicide_rate &lt;- avg_suicide_rate %&gt;%\n  top_n(20, Avg_Death_rate_15_19)\n\n# Create a color palette\navg_suicide_rate$Color &lt;- scales::rescale(avg_suicide_rate$Avg_Death_rate_15_19)\n\n# Create the interactive plot using plotly\ninteractive_plot &lt;- ggplot(avg_suicide_rate, aes(x = reorder(Entity, Avg_Death_rate_15_19), \n                                                  y = Avg_Death_rate_15_19, \n                                                  fill = Color)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip coordinates to make country names readable\n  scale_fill_gradient(low = \"blue\", high = \"red\", na.value = \"grey50\", \n                      guide = guide_colorbar(title = \"Average Rate\")) +\n  labs(title = \"Average Suicide Rate for Age 15-19 (All Years)\", \n       x = \"Country\", \n       y = \"Average Suicide Rate per 100,000 Population\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1)) +  # Keep text horizontal\n  theme(plot.margin = margin(10, 10, 10, 40))  # Adjust margins\n\n# Convert ggplot to plotly for interactivity with formatted tooltips\ninteractive_plotly &lt;- ggplotly(interactive_plot, tooltip = c(\"x\", \"y\")) %&gt;%\n  layout(hoverlabel = list(\n    namelength = 0,  # Ensure full name is shown\n    format = \".2f\"   # Display the y values (Avg_Death_rate_15_19) with 2 decimals in tooltips\n  ))\n\n# Show the interactive plot\ninteractive_plotly"
  },
  {
    "objectID": "Re-visualization_project.html#introduction",
    "href": "Re-visualization_project.html#introduction",
    "title": "Untitled",
    "section": "Introduction:",
    "text": "Introduction:\n\nOLD VISUALIZATION:"
  },
  {
    "objectID": "project_source_code.html#running-code",
    "href": "project_source_code.html#running-code",
    "title": "Project Source Code",
    "section": "",
    "text": "When you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n# Load required libraries\n\nsuppressWarnings({\n library(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)  \nlibrary(maps)\nlibrary(leaflet)\nlibrary(readr)\n\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(viridis) \nlibrary(rnaturalearth)  # For loading world map data\n\n\n})\n\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Summarize the data to get the average suicide rate for each country\naverage_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE), .groups = \"drop\")  # Add .groups = \"drop\" to avoid warnings\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with average suicide rates\nworld_data &lt;- merge(world, average_suicide_rate, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for suicide rates\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$Average_Suicide_Rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nleaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(Average_Suicide_Rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"Average Suicide Rate: \", round(Average_Suicide_Rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~Average_Suicide_Rate, opacity = 0.7, title = \"Average Suicide Rate per 100,000\", position = \"bottomright\") %&gt;%\n  addControl(\"&lt;strong&gt;Average Suicide Rates by Country of all the ages over the years 1950 to 2022&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n\n\n\n\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Calculate the overall average suicide rate for each year across all countries\nyearly_avg_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE))\n\n# Find the year with the highest overall average suicide rate\ntop_year &lt;- yearly_avg_suicide_rate %&gt;%\n  filter(Average_Suicide_Rate == max(Average_Suicide_Rate)) %&gt;%\n  pull(Year)\n\n# Filter the data to include only the data for the top year\ntop_year_data &lt;- suicide_data %&gt;%\n  filter(Year == top_year)\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with suicide rate data for the top year\nworld_data &lt;- merge(world, top_year_data, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for the suicide rates in the top year\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$suscide.rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nmap &lt;- leaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(suscide.rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"Suicide Rate: \", round(suscide.rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~suscide.rate, opacity = 0.7, title = paste(\"Suicide Rate per 100,000 in \", top_year), position = \"bottomright\")%&gt;%\naddControl(\"&lt;strong&gt;Average Suicide Rates of all the ages by Country for the top rated year: 1982&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n# Show the map\nmap\n\n\n\n\n\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Calculate the average suicide rate for each year\navg_suicide_by_year &lt;- data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_suicide_rate = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\")\n\n# Step 2: Create the frequency polygon\nfrequency_polygon &lt;- ggplot(avg_suicide_by_year, aes(x = Year, y = Average_suicide_rate)) +\n  geom_line(stat = \"identity\", color = \"blue\", size = 1) +  # Line to connect data points\n  geom_point(color = \"red\") +  # Points for each year\n  labs(title = \"Suicide Rates trend of all the ages and Years all over the world\", \n       x = \"Year\", \n       y = \"Average Suicide Rate per 100,000\") +\n  \n  theme(\n    plot.title = element_text(face = \"bold\"), \n    axis.title.x = element_text(face = \"bold\"), \n    axis.title.y = element_text(face = \"bold\")\n  )\n\n# Convert the frequency polygon to an interactive plot\ninteractive_frequency_polygon &lt;- ggplotly(frequency_polygon)\n\n# Show the interactive frequency polygon\ninteractive_frequency_polygon\n\n\n\n\n\n\n# Load the data (update the path to your CSV file accordingly)\nsuicide_data &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\")\n\n# Calculate the average suicide rate per country and filter top 5 countries\ntop_5_countries &lt;- suicide_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE)) %&gt;%\n  top_n(5, wt = Average_Suicide_Rate)\n\n# Find the top 5 years for each of the top 5 countries\ntop_5_years_per_country &lt;- suicide_data %&gt;%\n  filter(Country %in% top_5_countries$Country) %&gt;%\n  group_by(Country, Year) %&gt;%\n  summarise(Suicide_Rate = mean(suscide.rate, na.rm = TRUE)) %&gt;%\n  arrange(Country, desc(Suicide_Rate)) %&gt;%\n  group_by(Country) %&gt;%\n  slice_max(Suicide_Rate, n = 5)\n\n# Create a horizontal bar plot with increased bar size\np_bar &lt;- ggplot(top_5_years_per_country, aes(x = reorder(Country, Suicide_Rate), y = Suicide_Rate, fill = Year, text = paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Suicide Rate:\", round(Suicide_Rate, 2)))) +\n  geom_bar(stat = \"identity\", position = position_dodge(), width = 0.9) +  # Adjust width to increase bar size\n  scale_fill_gradient(low = \"#FF9999\", high = \"#CC0000\") +  # Light to dark red gradient\n  labs(title = \"Top 5 Countries with Highest Suicide Rates and Their Top 5 Years\",\n       x = \"Suicide Rate\",\n       y = \"Country\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"none\") +\n  coord_flip() +  # Flip the axes to create horizontal bars\n  \n  # Add year labels to the bars\n  geom_text(aes(label = Year), \n            position = position_dodge(width = 0.9),  # Ensure labels match bar positions\n            hjust = -0.2,   # Adjust horizontal position of text\n            size = 3,       # Set a smaller text size\n            fontface = \"bold\")       # Set a smaller text size\n\n# Convert ggplot to interactive plotly plot\ninteractive_bar_plot &lt;- ggplotly(p_bar, tooltip = \"text\")\n\n# Display the interactive plot\ninteractive_bar_plot\n\n\n\n\n\n\n# Load the CSV file\nchildren_data &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Step 1: Rename columns to appropriate labels\ncolnames(children_data) &lt;- c(\"Country\", \"Code\", \"Year\", \n                              \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                              \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                              \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                              \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                              \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Step 2: Calculate the average suicide rate for children (using 'Death_rate_15_19' as an example)\navg_suicide_rate &lt;- children_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(AverageRate = round(mean(Death_rate_15_19, na.rm = TRUE),2))\n\n# Step 3: Load map data\nworld_map &lt;- map_data(\"world\")\n\n# Step 4: Merge average suicide rates with the map data\nmap_data &lt;- world_map %&gt;%\n  left_join(avg_suicide_rate, by = c(\"region\" = \"Country\")) # Ensure to match the correct column names\n\n# Step 5: Create the static map using ggplot2\ngg &lt;- ggplot(data = map_data, aes(x = long, y = lat, group = group, fill = AverageRate)) +\n  geom_polygon(color = \"black\", aes(text = paste(\"Country:\", region, \"&lt;br&gt;Average Suicide Rate (Ages 15-19):\", round(AverageRate, 2)))) +\n  scale_fill_gradient(low = \"lightblue\", high = \"red\", na.value = \"grey50\", \n                      name = \"Average Suicide Rate\\n(Ages 15-19)\") +\n  labs(title = \"Average Suicide Rate of Children by Country (Ages 15-19)\",\n       x = \"Longitude\", \n       y = \"Latitude\") +\n  theme_minimal() +\n  theme(legend.position = \"right\")\n\n# Step 6: Convert ggplot to an interactive plotly object\ninteractive_map &lt;- ggplotly(gg, tooltip = \"text\")\n\n# Step 7: Display the interactive map\ninteractive_map\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Load the data\ndata &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Clean column names for easier access\ncolnames(data) &lt;- c(\"Entity\", \"Code\", \"Year\", \n                    \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                    \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                    \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                    \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                    \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Filter the data for the 15-19 age group and remove missing values\ndata_filtered &lt;- data %&gt;%\n  filter(!is.na(Death_rate_15_19))\n\n# Calculate the average suicide rate for each country across all years\navg_suicide_rate &lt;- data_filtered %&gt;%\n  group_by(Entity) %&gt;%\n  summarise(suscide_Rate = round(mean(Death_rate_15_19, na.rm = TRUE), 2)) %&gt;%\n  arrange(desc(suscide_Rate)) %&gt;%\n  top_n(20, suscide_Rate)\n\n# Create the bar plot with ggplot\nbar_plot &lt;- ggplot(avg_suicide_rate, aes(x = reorder(Entity, suscide_Rate), \n                                           y = suscide_Rate, \n                                           fill = suscide_Rate,\n                                           text = paste(\"Country:\", Entity, \"&lt;br&gt;Average Suicide Rate:\", suscide_Rate))) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip coordinates to make country names readable\n  scale_fill_gradient(low = \"#ffcccc\", high = \"#990000\") +  # Light red to dark red gradient\n  labs(title = \"Average Suicide Rate of Children (Age 15-19) (All Years)\", \n       x = \"Country\", \n       y = \"Average Suicide Rate per 100,000 Population\") +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8)) +  # Adjust text angle and size\n  theme(plot.margin = margin(10, 10, 10, 40)) +  # Adjust margins\n  guides(fill = guide_legend(title = \"Suicide Rate per 100,000\"))  # Change the legend title\n\n# Convert to an interactive plot with plotly\ninteractive_plot &lt;- ggplotly(bar_plot, tooltip = \"text\")  # Use the 'text' aesthetic for tooltip\n\n# Show the interactive plot\ninteractive_plot"
  },
  {
    "objectID": "project_source_code.html",
    "href": "project_source_code.html",
    "title": "Project Source Code",
    "section": "",
    "text": "# Load required libraries\n\nsuppressWarnings({\n library(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)  \nlibrary(maps)\nlibrary(leaflet)\nlibrary(readr)\n\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(viridis) \nlibrary(rnaturalearth)  # For loading world map data\n\n\n})"
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "",
    "text": "Suicide, a complex public health issue, is responsible for approximately 828,000 deaths globally each year. Understanding the factors contributing to suicide and effectively visualizing this data can help reduce stigma and foster preventive measures. This project aims to provide a clearer understanding of suicide rates worldwide from 1950 to 2022."
  },
  {
    "objectID": "home.html#data-sources",
    "href": "home.html#data-sources",
    "title": "Welcome to Global Suicide Data Visualization",
    "section": "",
    "text": "Data is sourced from **Our World in Data** and other trusted sources like WHO. We use R and `ggplot2` to create engaging and informative visualizations."
  },
  {
    "objectID": "home.html#contact",
    "href": "home.html#contact",
    "title": "Welcome to Global Suicide Data Visualization",
    "section": "",
    "text": "For inquiries, contact [your_email@example.com]."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Information",
    "section": "",
    "text": "If you would like to get in touch, feel free to reach out through the following:\n\nVenkata Lakshmi Parimala Pasupuleti\n\nEmail: venkatalakshmiparimala@gmail.com\nPhone: +1 703-261-5410\nLinkedIn: Venkata Lakshmi Parimala Pasupuleti\n\n\n\nKiran Dabbiril\n\nEmail: dabbiru.kiran03@gmail.com\nPhone: +1 571-663-5603\n\nWe look forward to hearing from you!"
  },
  {
    "objectID": "contact.html#contact-information",
    "href": "contact.html#contact-information",
    "title": "Untitled",
    "section": "",
    "text": "If you would like to get in touch, feel free to reach out through the following:\n- **Email**: [venkatalakshmiparimala@gmail.com](mailto:venkatalakshmiparimala@gmail.com) - **Phone**: +1 703-261-5410 - **LinkedIn**: [Venkata Lakshmi Parimala Pasupuleti](https://www.linkedin.com/in/venkata-lakshmi-parimala-pasupuleti/)\nWe look forward to hearing from you!"
  },
  {
    "objectID": "References.html",
    "href": "References.html",
    "title": "References",
    "section": "",
    "text": "The data and insights used in this project are sourced from the following:\nData CSV: - Download file1.csv - Download file2.csv\nClick the links above to download the CSV files used for the analysis.\n\nReferences\n[1] “Suicide,” Our World in Data. [Online]. Available: https://ourworldindata.org/suicide. [Accessed: Oct. 8, 2024].\nFor more detailed information, please refer to the original publication."
  },
  {
    "objectID": "project_details.html#introduction",
    "href": "project_details.html#introduction",
    "title": "Overview of the Re-visualization Project",
    "section": "",
    "text": "Suicide is the act of intentionally causing one’s own death. It can be due to many conditions or the situations. It includes Mental disorders, physical disorders, and substance abuse are the risk factors. Suicides resulted in 828,000 deaths globally in 2015, an increase from 712,000 deaths in 1990. This makes suicide the 10th leading cause of death worldwide. Every death from suicide is a tragedy.\nThe below is the Visualization on Suicides by Saloni Dattani, Lucas Rodes-Guirao, Hannah Ritchie, Max Roser, and Esteban Ortiz-Ospina. The research shows that suicide rates can be reduced with greater understanding and support. To do that the researchers considered or recognized suicide as a public health problem, and people should know that it can be prevented and its rates can be reduced.\n\n\n\n\n\nSuicide rates vary around the world:\nSuicide rates vary widely between the countries. The given visualization depicts the data of annual suicide rates per 100,000 people from 1950 to 2022, across various countries. Researchers used line graph to predict the data.\n\nX-axis represents the years from 1950 to 2022 and y-axis represents the suicide rate per 100000 people, ranging from 0 to 40. It also says that higher the value, the greater will be the number of suicide rates.\nEach line of the graph represents the countries. The countries which have higher suicide rates are represented on the top. The legends taken are countries.\n\nObservations:\n\nThere is a wide range of variations between the countries. Countries like Lithuania, South Korea shows the highest suicide rates, as indicated by their position near the top of the graph.\nSome countries shows large fluctuations in the suicide rates while other countries shows the constant rate throughout the years.\nIt also says that suicide deaths are under-reported in many countries due to social stigma and culture or legal concerns means that actual rates can be higher than the reported rates.\nThe data is collected based on the data listed in the death certificates. It can impact the accuracy of the data\nThe data is adjusted for age standardization allowing a fair comparison between the countries with different age structures, ensuring that population age distribution doesn’t skew the data.\n\n\n\n\nMore number of lines: The graph contains a huge number of lines which are representing the countries. This creates a messy graph it is very difficult to predict the data immediately as we look into the graph.\nColor Categorization: All the countries represented with different colors but for some countries there are distinct colors where it will be very difficult to categorize the data. There are similar colors in for different countries. We can use more contrasting colors to represent the data or we can group the colors into regions or categories.\nInteractive Labeling: With so many lines we cannot identify the particular country instantly and it is impossible to find the particular country and there are all the countries mentioned in the legend where it is impossible to identify the specific country. Hence we can use interactive Labeling for highlighting the particular country.\nNo Highlights on the key insights: All the lines in the graph are in equal size where there is no differentiation between the countries. We can highlight the countries which have highest suicide rates and lowest suicide rates with different dimensions of the lines.\n\n\nThe above visualization tells us about the reported suicide rates by age in the United States.\nObservations:\nIt explains the breakdown for the rate of suicides for different age groups like children, adults. The data highlights the trends such as the increasing or decreasing risk of suicide within the specific age over time and across different regions.\n\nIt shows the data for the suicide rates per 100,000 people across different age groups. Age specific data usually reveals trends showing which age group are more vulnerable to suicide in different regions.\nAccording to the graph it predicts that the old generation people have the higher suicide rates (Age between 80-84). The age between 15-19 suicidal rates are less. But there is growing concern about suicidal rates in young adults particularly due to health conditions and mental stress.\n\n\n\n\n\nMore number of lines: The graph contains a huge number of lines which are representing the different age groups. This creates a messy graph it is very difficult to predict the data immediately as we look into the graph.\nColor Categorization: All the age groups are represented with different colors but for some there are distinct colors where it will be very difficult to categorize the data. There are similar colors for different age groups. We can use more contrasting colors to represent the data or we can group the colors into categories or age groups.\nLegend: The legend have too many entries where it is difficult for the user to identify the particular data of the age group in a particular year. Viewers must constantly shift their focus on the legend and the graph simultaneously where it would be difficult for predicting the exact information.\nLack of data insights: There is no contextual information or annotations on the graph to explain significant spikes, trends or sudden drops in the suicide rates for certain age groups.\nInteractive Labeling: Adding the interactvite labeling helps to improve the readability."
  },
  {
    "objectID": "contact.html#section",
    "href": "contact.html#section",
    "title": "Contact Information",
    "section": "",
    "text": "If you would like to get in touch, feel free to reach out through the following:\n- **Email**: [venkatalakshmiparimala@gmail.com](mailto:venkatalakshmiparimala@gmail.com) - **Phone**: +1 703-261-5410 - **LinkedIn**: [Venkata Lakshmi Parimala Pasupuleti](https://www.linkedin.com/in/venkata-lakshmi-parimala-pasupuleti/)\nWe look forward to hearing from you!"
  },
  {
    "objectID": "home.html#global-trends",
    "href": "home.html#global-trends",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "Global Trends",
    "text": "Global Trends\nThe project analyzes variations in suicide rates across different countries, highlighting the alarming statistics in nations such as Lithuania and South Korea."
  },
  {
    "objectID": "home.html#demographic-focus",
    "href": "home.html#demographic-focus",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "Demographic Focus",
    "text": "Demographic Focus\nWe break down data by age groups to identify trends, particularly concerning the vulnerability of younger populations."
  },
  {
    "objectID": "home.html#visual-improvements",
    "href": "home.html#visual-improvements",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "Visual Improvements",
    "text": "Visual Improvements\nPrevious visualizations faced issues like clutter and poor categorization. Our re-visualization employs world maps and interactive graphs to enhance clarity and engagement."
  },
  {
    "objectID": "project_details.html",
    "href": "project_details.html",
    "title": "Overview of the Re-visualization Project",
    "section": "",
    "text": "Suicide is the act of intentionally causing one’s own death. It can be due to many conditions or the situations. It includes Mental disorders, physical disorders, and substance abuse are the risk factors. Suicides resulted in 828,000 deaths globally in 2015, an increase from 712,000 deaths in 1990. This makes suicide the 10th leading cause of death worldwide. Every death from suicide is a tragedy.\nThe below is the Visualization on Suicides by Saloni Dattani, Lucas Rodes-Guirao, Hannah Ritchie, Max Roser, and Esteban Ortiz-Ospina. The research shows that suicide rates can be reduced with greater understanding and support. To do that the researchers considered or recognized suicide as a public health problem, and people should know that it can be prevented and its rates can be reduced.\n\n\n\n\n\nSuicide rates vary around the world:\nSuicide rates vary widely between the countries. The given visualization depicts the data of annual suicide rates per 100,000 people from 1950 to 2022, across various countries. Researchers used line graph to predict the data.\n\nX-axis represents the years from 1950 to 2022 and y-axis represents the suicide rate per 100000 people, ranging from 0 to 40. It also says that higher the value, the greater will be the number of suicide rates.\nEach line of the graph represents the countries. The countries which have higher suicide rates are represented on the top. The legends taken are countries.\n\nObservations:\n\nThere is a wide range of variations between the countries. Countries like Lithuania, South Korea shows the highest suicide rates, as indicated by their position near the top of the graph.\nSome countries shows large fluctuations in the suicide rates while other countries shows the constant rate throughout the years.\nIt also says that suicide deaths are under-reported in many countries due to social stigma and culture or legal concerns means that actual rates can be higher than the reported rates.\nThe data is collected based on the data listed in the death certificates. It can impact the accuracy of the data\nThe data is adjusted for age standardization allowing a fair comparison between the countries with different age structures, ensuring that population age distribution doesn’t skew the data.\n\n\n\n\nMore number of lines: The graph contains a huge number of lines which are representing the countries. This creates a messy graph it is very difficult to predict the data immediately as we look into the graph.\nColor Categorization: All the countries represented with different colors but for some countries there are distinct colors where it will be very difficult to categorize the data. There are similar colors in for different countries. We can use more contrasting colors to represent the data or we can group the colors into regions or categories.\nInteractive Labeling: With so many lines we cannot identify the particular country instantly and it is impossible to find the particular country and there are all the countries mentioned in the legend where it is impossible to identify the specific country. Hence we can use interactive Labeling for highlighting the particular country.\nNo Highlights on the key insights: All the lines in the graph are in equal size where there is no differentiation between the countries. We can highlight the countries which have highest suicide rates and lowest suicide rates with different dimensions of the lines.\n\n\nThe above visualization tells us about the reported suicide rates by age in the United States.\nObservations:\nIt explains the breakdown for the rate of suicides for different age groups like children, adults. The data highlights the trends such as the increasing or decreasing risk of suicide within the specific age over time and across different regions.\n\nIt shows the data for the suicide rates per 100,000 people across different age groups. Age specific data usually reveals trends showing which age group are more vulnerable to suicide in different regions.\nAccording to the graph it predicts that the old generation people have the higher suicide rates (Age between 80-84). The age between 15-19 suicidal rates are less. But there is growing concern about suicidal rates in young adults particularly due to health conditions and mental stress.\n\n\n\n\n\nMore number of lines: The graph contains a huge number of lines which are representing the different age groups. This creates a messy graph it is very difficult to predict the data immediately as we look into the graph.\nColor Categorization: All the age groups are represented with different colors but for some there are distinct colors where it will be very difficult to categorize the data. There are similar colors for different age groups. We can use more contrasting colors to represent the data or we can group the colors into categories or age groups.\nLegend: The legend have too many entries where it is difficult for the user to identify the particular data of the age group in a particular year. Viewers must constantly shift their focus on the legend and the graph simultaneously where it would be difficult for predicting the exact information.\nLack of data insights: There is no contextual information or annotations on the graph to explain significant spikes, trends or sudden drops in the suicide rates for certain age groups.\nInteractive Labeling: Adding the interactvite labeling helps to improve the readability."
  },
  {
    "objectID": "project_details.html#average-suicidal-rates-by-country-from-1950-to-2022",
    "href": "project_details.html#average-suicidal-rates-by-country-from-1950-to-2022",
    "title": "Overview of the Re-visualization Project",
    "section": "Average Suicidal Rates By Country from 1950 to 2022:",
    "text": "Average Suicidal Rates By Country from 1950 to 2022:\nThe map below illustrates the average suicide rates by country from 1950 to 2022, broken down by different age groups such as children, young adults, and adults across all nations.\nIn the previous visualization, the data was presented in a line graph for all countries, resulting in a cluttered and hard-to-read display. To improve clarity, we have re-visualized the data by focusing on the average suicide rates from 1950 to 2022 using a world map. In the provided dataset, we calculated the average suicide rates over the years and made predictions based on that data. The world map offers an easier and more intuitive way to interpret the data. This updated map is also interactive, allowing users to highlight specific parameters and explore the average range of deaths by suicide more flexibly.\nBased on the predictions shown in the map, Russia has the highest average suicide rates.\n\n\n\n\n\n\n\nAverage Suicide Rates of all the ages by Country for the top rated year: 1982\nThe map below shows the average suicide rates for all age groups by country for the year 1982, which was chosen because it had the highest suicide rates between 1982 and 2022.\nIn the previous visualization, the data was displayed in a line graph, resulting in a cluttered and hard-to-read format. To improve accessibility, we re-visualized the data by calculating the average suicide rates across all years and selected 1982 for its peak in suicide rates.\nThis updated visualization uses a world map to display the data, with countries categorized by different colors, highlighting the highest suicide rates in red. Russia stands out as having the highest average suicide rates.\n\n\n\n\n\n\n\n\nAverage Suicide Rates by Year all over the World:\nThe map below shows the average suicide rates by year globally from 1950 to 2022. We re-visualized the data by calculating the average death rates over this period. First, we determined the averages for each year for all the countries, and then we used a frequency polygon graph to visualize the trend of the suicide rates over all the years.\nIn this representation, the highest suicide rate occurred in 1982, with a rate of 12.38, while the lowest rate across all countries and age groups was recorded in 2016 with 7.21."
  },
  {
    "objectID": "project_details.html#top-5-years-with-highest-suicide-rates-in-top-5-countries",
    "href": "project_details.html#top-5-years-with-highest-suicide-rates-in-top-5-countries",
    "title": "Overview of the Re-visualization Project",
    "section": "Top 5 Years with Highest Suicide Rates in Top 5 Countries:",
    "text": "Top 5 Years with Highest Suicide Rates in Top 5 Countries:\nThe graph below shows the top 5 years with the highest suicide rates in the top 5 countries. First, we identified the 5 countries with the highest average suicide rates. After filtering the data to include only these countries, we selected the top 5 years with the highest suicide rates for each. Using this categorized data, we created a bar graph with ggplot. Additionally, we added interactive labeling to enhance accessibility and provide a more user-friendly experience for viewers."
  },
  {
    "objectID": "project_details.html#average-suicide-rates-for-age-15-19-over-the-years",
    "href": "project_details.html#average-suicide-rates-for-age-15-19-over-the-years",
    "title": "Overview of the Re-visualization Project",
    "section": "Average Suicide Rates for Age 15-19 over the years:",
    "text": "Average Suicide Rates for Age 15-19 over the years:\nThe graph below displays the average suicide rates for individuals aged 15-19. The previous visualization focused on overall suicide rates across all years and age groups. For this re-visualization, we specifically selected the 15-19 age group, as it marks the end of teen years. We used a world map to represent the data and incorporated interactive labeling for easier interpretation.\n\n\n\n\n\n\n\nAverage Suicide Rate for the Top 20 Nations in the 15-19 Age Group (Across All Years):\nThe graph below illustrates the average suicide rate for the top 20 countries in the 15-19 age group across all years. It highlights the top 20 countries for this age group, with the addition of interactive labeling for enhanced user experience."
  },
  {
    "objectID": "project_details.html#re-visualizations",
    "href": "project_details.html#re-visualizations",
    "title": "Overview of the Re-visualization Project",
    "section": "Re-Visualizations:",
    "text": "Re-Visualizations:\n\nAccording to the above research and bad visualizations found we have made some changes and re-visualized the data as below:\nEach map or graph in this project displays suicide rates per 100,000 people to enhance the clarity and effectiveness of the visualization and this is the standard that data analysts generally follow while visualizing death related data."
  },
  {
    "objectID": "project_details.html#average-suicide-rates-for-ages-15-19-over-the-years",
    "href": "project_details.html#average-suicide-rates-for-ages-15-19-over-the-years",
    "title": "Overview of the Re-visualization Project",
    "section": "Average Suicide Rates for Ages 15-19 over the years:",
    "text": "Average Suicide Rates for Ages 15-19 over the years:\nThe graph below displays the average suicide rates for individuals aged 15-19. The previous visualization focused on overall suicide rates across all years and age groups. For this re-visualization, we specifically selected the 15-19 age group, as it marks the end of teen years. We used a world map to represent the data and incorporated interactive labeling for easier interpretation.\n\n\n\n\n\n\n\nAverage Suicide Rate for the Top 20 Nations in the 15-19 Age Group (Across All Years):\nThe graph below illustrates the average suicide rate for the top 20 countries in the 15-19 age group over the years 1950 to 2021. It highlights the top 20 countries for this age group, with the addition of interactive labeling for enhanced user experience."
  },
  {
    "objectID": "home.html#more-information",
    "href": "home.html#more-information",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "More Information",
    "text": "More Information\nYou can find more information about the project visualization, the code used, and their references on the following pages:\n\nProject Summary\nProject Source Code\nReferences"
  },
  {
    "objectID": "project_source_code.html#project-source-code",
    "href": "project_source_code.html#project-source-code",
    "title": "Project Source Code",
    "section": "",
    "text": "# Load required libraries\n\nsuppressWarnings({\n library(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)  \nlibrary(maps)\nlibrary(leaflet)\nlibrary(readr)\n\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(viridis) \nlibrary(rnaturalearth)  # For loading world map data\n\n\n})\n\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Summarize the data to get the average suicide rate for each country\naverage_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE), .groups = \"drop\")  # Add .groups = \"drop\" to avoid warnings\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with average suicide rates\nworld_data &lt;- merge(world, average_suicide_rate, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for suicide rates\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$Average_Suicide_Rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nleaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(Average_Suicide_Rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"Average Suicide Rate: \", round(Average_Suicide_Rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~Average_Suicide_Rate, opacity = 0.7, title = \"Average Suicide Rate per 100,000\", position = \"bottomright\") %&gt;%\n  addControl(\"&lt;strong&gt;Average Suicide Rates by Country of all the ages over the years 1950 to 2022&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n\n\n\n\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Calculate the overall average suicide rate for each year across all countries\nyearly_avg_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE))\n\n# Find the year with the highest overall average suicide rate\ntop_year &lt;- yearly_avg_suicide_rate %&gt;%\n  filter(Average_Suicide_Rate == max(Average_Suicide_Rate)) %&gt;%\n  pull(Year)\n\n# Filter the data to include only the data for the top year\ntop_year_data &lt;- suicide_data %&gt;%\n  filter(Year == top_year)\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with suicide rate data for the top year\nworld_data &lt;- merge(world, top_year_data, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for the suicide rates in the top year\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$suscide.rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nmap &lt;- leaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(suscide.rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"Suicide Rate: \", round(suscide.rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~suscide.rate, opacity = 0.7, title = paste(\"Suicide Rate per 100,000 in \", top_year), position = \"bottomright\")%&gt;%\naddControl(\"&lt;strong&gt;Average Suicide Rates of all the ages by Country for the top rated year: 1982&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n# Show the map\nmap\n\n\n\n\n\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Calculate the average suicide rate for each year\navg_suicide_by_year &lt;- data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_suicide_rate = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\")\n\n# Step 2: Create the frequency polygon\nfrequency_polygon &lt;- ggplot(avg_suicide_by_year, aes(x = Year, y = Average_suicide_rate)) +\n  geom_line(stat = \"identity\", color = \"blue\", size = 1) +  # Line to connect data points\n  geom_point(color = \"red\") +  # Points for each year\n  labs(title = \"Suicide Rates trend of all the ages and Years all over the world\", \n       x = \"Year\", \n       y = \"Average Suicide Rate per 100,000\") +\n  \n  theme(\n    plot.title = element_text(face = \"bold\"), \n    axis.title.x = element_text(face = \"bold\"), \n    axis.title.y = element_text(face = \"bold\")\n  )\n\n# Convert the frequency polygon to an interactive plot\ninteractive_frequency_polygon &lt;- ggplotly(frequency_polygon)\n\n# Show the interactive frequency polygon\ninteractive_frequency_polygon\n\n\n\n\n\n\n# Load the data (update the path to your CSV file accordingly)\nsuicide_data &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\")\n\n# Calculate the average suicide rate per country and filter top 5 countries\ntop_5_countries &lt;- suicide_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE)) %&gt;%\n  top_n(5, wt = Average_Suicide_Rate)\n\n# Find the top 5 years for each of the top 5 countries\ntop_5_years_per_country &lt;- suicide_data %&gt;%\n  filter(Country %in% top_5_countries$Country) %&gt;%\n  group_by(Country, Year) %&gt;%\n  summarise(Suicide_Rate = mean(suscide.rate, na.rm = TRUE)) %&gt;%\n  arrange(Country, desc(Suicide_Rate)) %&gt;%\n  group_by(Country) %&gt;%\n  slice_max(Suicide_Rate, n = 5)\n\n# Create a horizontal bar plot with increased bar size\np_bar &lt;- ggplot(top_5_years_per_country, aes(x = reorder(Country, Suicide_Rate), y = Suicide_Rate, fill = Year, text = paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Suicide Rate:\", round(Suicide_Rate, 2)))) +\n  geom_bar(stat = \"identity\", position = position_dodge(), width = 0.9) +  # Adjust width to increase bar size\n  scale_fill_gradient(low = \"#FF9999\", high = \"#CC0000\") +  # Light to dark red gradient\n  labs(title = \"Top 5 Countries with Highest Suicide Rates and Their Top 5 Years\",\n       x = \"Suicide Rate\",\n       y = \"Country\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"none\") +\n  coord_flip() +  # Flip the axes to create horizontal bars\n  \n  # Add year labels to the bars\n  geom_text(aes(label = Year), \n            position = position_dodge(width = 0.9),  # Ensure labels match bar positions\n            hjust = -0.2,   # Adjust horizontal position of text\n            size = 3,       # Set a smaller text size\n            fontface = \"bold\")       # Set a smaller text size\n\n# Convert ggplot to interactive plotly plot\ninteractive_bar_plot &lt;- ggplotly(p_bar, tooltip = \"text\")\n\n# Display the interactive plot\ninteractive_bar_plot\n\n\n\n\n\n\n# Load the CSV file\nchildren_data &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Step 1: Rename columns to appropriate labels\ncolnames(children_data) &lt;- c(\"Country\", \"Code\", \"Year\", \n                              \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                              \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                              \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                              \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                              \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Step 2: Calculate the average suicide rate for children (using 'Death_rate_15_19' as an example)\navg_suicide_rate &lt;- children_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(AverageRate = round(mean(Death_rate_15_19, na.rm = TRUE),2))\n\n# Step 3: Load map data\nworld_map &lt;- map_data(\"world\")\n\n# Step 4: Merge average suicide rates with the map data\nmap_data &lt;- world_map %&gt;%\n  left_join(avg_suicide_rate, by = c(\"region\" = \"Country\")) # Ensure to match the correct column names\n\n# Step 5: Create the static map using ggplot2\ngg &lt;- ggplot(data = map_data, aes(x = long, y = lat, group = group, fill = AverageRate)) +\n  geom_polygon(color = \"black\", aes(text = paste(\"Country:\", region, \"&lt;br&gt;Average Suicide Rate (Ages 15-19):\", round(AverageRate, 2)))) +\n  scale_fill_gradient(low = \"lightblue\", high = \"red\", na.value = \"grey50\", \n                      name = \"Average Suicide Rate\\n(Ages 15-19)\") +\n  labs(title = \"Average Suicide Rates by Country for Ages 15-19\",\n       x = \"Longitude\", \n       y = \"Latitude\") +\n  theme_minimal() +\n  theme(legend.position = \"right\")\n\n# Step 6: Convert ggplot to an interactive plotly object\ninteractive_map &lt;- ggplotly(gg, tooltip = \"text\")\n\n# Step 7: Display the interactive map\ninteractive_map\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Load the data\ndata &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Clean column names for easier access\ncolnames(data) &lt;- c(\"Entity\", \"Code\", \"Year\", \n                    \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                    \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                    \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                    \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                    \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Filter the data for the 15-19 age group and remove missing values\ndata_filtered &lt;- data %&gt;%\n  filter(!is.na(Death_rate_15_19))\n\n# Calculate the average suicide rate for each country across all years\navg_suicide_rate &lt;- data_filtered %&gt;%\n  group_by(Entity) %&gt;%\n  summarise(suscide_Rate = round(mean(Death_rate_15_19, na.rm = TRUE), 2)) %&gt;%\n  arrange(desc(suscide_Rate)) %&gt;%\n  top_n(20, suscide_Rate)\n\n# Create the bar plot with ggplot\nbar_plot &lt;- ggplot(avg_suicide_rate, aes(x = reorder(Entity, suscide_Rate), \n                                           y = suscide_Rate, \n                                           fill = suscide_Rate,\n                                           text = paste(\"Country:\", Entity, \"&lt;br&gt;Average Suicide Rate:\", suscide_Rate))) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip coordinates to make country names readable\n  scale_fill_gradient(low = \"#ffcccc\", high = \"#990000\") +  # Light red to dark red gradient\n  labs(title = \"Suicide Rates Among 15-19 Year Olds in the Top 20 Nations (All Years)\", \n       x = \"Country\", \n       y = \"Average Suicide Rate per 100,000 Population\") +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8)) +  # Adjust text angle and size\n  theme(plot.margin = margin(10, 10, 10, 40)) +  # Adjust margins\n  guides(fill = guide_legend(title = \"Suicide Rate per 100,000\"))  # Change the legend title\n\n# Convert to an interactive plot with plotly\ninteractive_plot &lt;- ggplotly(bar_plot, tooltip = \"text\")  # Use the 'text' aesthetic for tooltip\n\n# Show the interactive plot\ninteractive_plot"
  },
  {
    "objectID": "home.html#understanding-global-suicide-rates-1950-2022",
    "href": "home.html#understanding-global-suicide-rates-1950-2022",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "",
    "text": "Suicide, a complex public health issue, is responsible for approximately 828,000 deaths globally each year. Understanding the factors contributing to suicide and effectively visualizing this data can help reduce stigma and foster preventive measures. This project aims to provide a clearer understanding of suicide rates worldwide from 1950 to 2022."
  },
  {
    "objectID": "home.html#key-insights",
    "href": "home.html#key-insights",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "Key Insights:",
    "text": "Key Insights:"
  },
  {
    "objectID": "home.html#visualizations-include",
    "href": "home.html#visualizations-include",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "Visualizations Include",
    "text": "Visualizations Include\n\nAverage Suicide Rates by Country (1950-2022): An interactive world map displaying the average suicide rates per 100,000 people, allowing for a deeper exploration of regional data.\nPeak Suicide Rates (1982): Visualization of the highest average suicide rates by country during this pivotal year.\nYearly Trends (1950-2022): A frequency polygon graph showcasing the global trend in suicide rates over time.\nTop Countries and Years: Bar graphs detailing the top five countries with the highest suicide rates and their corresponding peak years."
  },
  {
    "objectID": "home.html#objective",
    "href": "home.html#objective",
    "title": "Welcome to the Global Suicide Data Visualization!",
    "section": "Objective",
    "text": "Objective\nThis project not only aims to present statistical data effectively but also to foster discussions on suicide prevention and the importance of mental health awareness."
  },
  {
    "objectID": "project_source_code.html#loading-libraries",
    "href": "project_source_code.html#loading-libraries",
    "title": "Project Source Code",
    "section": "",
    "text": "# Load required libraries\n\nsuppressWarnings({\n library(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)  \nlibrary(maps)\nlibrary(leaflet)\nlibrary(readr)\n\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(viridis) \nlibrary(rnaturalearth)  # For loading world map data\n\n\n})"
  },
  {
    "objectID": "project_source_code.html#average-suicidal-rates-by-country-from-1950-to-2022",
    "href": "project_source_code.html#average-suicidal-rates-by-country-from-1950-to-2022",
    "title": "Project Source Code",
    "section": "Average Suicidal Rates By Country from 1950 to 2022:",
    "text": "Average Suicidal Rates By Country from 1950 to 2022:\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Summarize the data to get the average suicide rate for each country\naverage_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE), .groups = \"drop\")  # Add .groups = \"drop\" to avoid warnings\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with average suicide rates\nworld_data &lt;- merge(world, average_suicide_rate, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for suicide rates\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$Average_Suicide_Rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nleaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(Average_Suicide_Rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"Average Suicide Rate: \", round(Average_Suicide_Rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~Average_Suicide_Rate, opacity = 0.7, title = \"Average Suicide Rate per 100,000\", position = \"bottomright\") %&gt;%\n  addControl(\"&lt;strong&gt;Average Suicide Rates by Country of all the ages over the years 1950 to 2022&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n\n\n\n\n\nAverage Suicide Rates of all the ages by Country for the top rated year: 1982\n\n# Load the data (change the path to where your file is stored)\nsuicide_data &lt;- read.csv(\"suicide-rates-all.csv\")\n\n# Calculate the overall average suicide rate for each year across all countries\nyearly_avg_suicide_rate &lt;- suicide_data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE))\n\n# Find the year with the highest overall average suicide rate\ntop_year &lt;- yearly_avg_suicide_rate %&gt;%\n  filter(Average_Suicide_Rate == max(Average_Suicide_Rate)) %&gt;%\n  pull(Year)\n\n# Filter the data to include only the data for the top year\ntop_year_data &lt;- suicide_data %&gt;%\n  filter(Year == top_year)\n\n# Load world map data\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Merge world map data with suicide rate data for the top year\nworld_data &lt;- merge(world, top_year_data, by.x = \"name\", by.y = \"Country\", all.x = TRUE)\n\n# Create color palette for the suicide rates in the top year\npal &lt;- colorNumeric(palette = \"YlOrRd\", domain = world_data$suscide.rate, na.color = \"transparent\")\n\n# Create interactive leaflet map\nmap &lt;- leaflet(world_data) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(suscide.rate),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = ~paste(name, \"Suicide Rate: \", round(suscide.rate, 2)),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"\n    )\n  ) %&gt;%\n  addLegend(pal = pal, values = ~suscide.rate, opacity = 0.7, title = paste(\"Suicide Rate per 100,000 in \", top_year), position = \"bottomright\")%&gt;%\naddControl(\"&lt;strong&gt;Average Suicide Rates of all the ages by Country for the top rated year: 1982&lt;/strong&gt;\", position = \"topright\", \n             className = \"map-title\")  # Add title to the map\n\n# Show the map\nmap\n\n\n\n\n\n\n\nAverage Suicide Rates by Year all over the World:\n\n# Read the data\ndata &lt;- read_csv(\n  \"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\",\n  col_types = cols(\n    Country = col_character(),\n    Code = col_character(),\n    Year = col_double(),\n    `suscide-rate` = col_double()\n  )\n)\n\n# Step 1: Calculate the average suicide rate for each year\navg_suicide_by_year &lt;- data %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Average_suicide_rate = round(mean(`suscide-rate`, na.rm = TRUE), 2), .groups = \"drop\")\n\n# Step 2: Create the frequency polygon\nfrequency_polygon &lt;- ggplot(avg_suicide_by_year, aes(x = Year, y = Average_suicide_rate)) +\n  geom_line(stat = \"identity\", color = \"blue\", size = 1) +  # Line to connect data points\n  geom_point(color = \"red\") +  # Points for each year\n  labs(title = \"Suicide Rates trend of all the ages and Years all over the world\", \n       x = \"Year\", \n       y = \"Average Suicide Rate per 100,000\") +\n  \n  theme(\n    plot.title = element_text(face = \"bold\"), \n    axis.title.x = element_text(face = \"bold\"), \n    axis.title.y = element_text(face = \"bold\")\n  )\n\n# Convert the frequency polygon to an interactive plot\ninteractive_frequency_polygon &lt;- ggplotly(frequency_polygon)\n\n# Show the interactive frequency polygon\ninteractive_frequency_polygon"
  },
  {
    "objectID": "project_source_code.html#top-5-years-with-highest-suicide-rates-in-top-5-countries",
    "href": "project_source_code.html#top-5-years-with-highest-suicide-rates-in-top-5-countries",
    "title": "Project Source Code",
    "section": "Top 5 Years with Highest Suicide Rates in Top 5 Countries:",
    "text": "Top 5 Years with Highest Suicide Rates in Top 5 Countries:\n\n# Load the data (update the path to your CSV file accordingly)\nsuicide_data &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-all.csv\")\n\n# Calculate the average suicide rate per country and filter top 5 countries\ntop_5_countries &lt;- suicide_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(Average_Suicide_Rate = mean(suscide.rate, na.rm = TRUE)) %&gt;%\n  top_n(5, wt = Average_Suicide_Rate)\n\n# Find the top 5 years for each of the top 5 countries\ntop_5_years_per_country &lt;- suicide_data %&gt;%\n  filter(Country %in% top_5_countries$Country) %&gt;%\n  group_by(Country, Year) %&gt;%\n  summarise(Suicide_Rate = mean(suscide.rate, na.rm = TRUE)) %&gt;%\n  arrange(Country, desc(Suicide_Rate)) %&gt;%\n  group_by(Country) %&gt;%\n  slice_max(Suicide_Rate, n = 5)\n\n# Create a horizontal bar plot with increased bar size\np_bar &lt;- ggplot(top_5_years_per_country, aes(x = reorder(Country, Suicide_Rate), y = Suicide_Rate, fill = Year, text = paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Suicide Rate:\", round(Suicide_Rate, 2)))) +\n  geom_bar(stat = \"identity\", position = position_dodge(), width = 0.9) +  # Adjust width to increase bar size\n  scale_fill_gradient(low = \"#FF9999\", high = \"#CC0000\") +  # Light to dark red gradient\n  labs(title = \"Top 5 Countries with Highest Suicide Rates and Their Top 5 Years\",\n       x = \"Suicide Rate\",\n       y = \"Country\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"none\") +\n  coord_flip() +  # Flip the axes to create horizontal bars\n  \n  # Add year labels to the bars\n  geom_text(aes(label = Year), \n            position = position_dodge(width = 0.9),  # Ensure labels match bar positions\n            hjust = -0.2,   # Adjust horizontal position of text\n            size = 3,       # Set a smaller text size\n            fontface = \"bold\")       # Set a smaller text size\n\n# Convert ggplot to interactive plotly plot\ninteractive_bar_plot &lt;- ggplotly(p_bar, tooltip = \"text\")\n\n# Display the interactive plot\ninteractive_bar_plot"
  },
  {
    "objectID": "project_source_code.html#average-suicide-rates-for-ages-15-19-over-the-years",
    "href": "project_source_code.html#average-suicide-rates-for-ages-15-19-over-the-years",
    "title": "Project Source Code",
    "section": "Average Suicide Rates for Ages 15-19 over the years:",
    "text": "Average Suicide Rates for Ages 15-19 over the years:\n\n# Load the CSV file\nchildren_data &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Step 1: Rename columns to appropriate labels\ncolnames(children_data) &lt;- c(\"Country\", \"Code\", \"Year\", \n                              \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                              \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                              \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                              \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                              \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Step 2: Calculate the average suicide rate for children (using 'Death_rate_15_19' as an example)\navg_suicide_rate &lt;- children_data %&gt;%\n  group_by(Country) %&gt;%\n  summarise(AverageRate = round(mean(Death_rate_15_19, na.rm = TRUE),2))\n\n# Step 3: Load map data\nworld_map &lt;- map_data(\"world\")\n\n# Step 4: Merge average suicide rates with the map data\nmap_data &lt;- world_map %&gt;%\n  left_join(avg_suicide_rate, by = c(\"region\" = \"Country\")) # Ensure to match the correct column names\n\n# Step 5: Create the static map using ggplot2\ngg &lt;- ggplot(data = map_data, aes(x = long, y = lat, group = group, fill = AverageRate)) +\n  geom_polygon(color = \"black\", aes(text = paste(\"Country:\", region, \"&lt;br&gt;Average Suicide Rate (Ages 15-19):\", round(AverageRate, 2)))) +\n  scale_fill_gradient(low = \"lightblue\", high = \"red\", na.value = \"grey50\", \n                      name = \"Average Suicide Rate\\n(Ages 15-19)\") +\n  labs(title = \"Average Suicide Rate of Children by Country (Ages 15-19)\",\n       x = \"Longitude\", \n       y = \"Latitude\") +\n  theme_minimal() +\n  theme(legend.position = \"right\")\n\n# Step 6: Convert ggplot to an interactive plotly object\ninteractive_map &lt;- ggplotly(gg, tooltip = \"text\")\n\n# Step 7: Display the interactive map\ninteractive_map\n\n\n\n\n\n\nAverage Suicide Rate for the Top 20 Nations in the 15-19 Age Group (Across All Years):\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Load the data\ndata &lt;- read.csv(\"C:\\\\Users\\\\Venkata\\\\Desktop\\\\stat1\\\\Website project\\\\website\\\\suicide-rates-by-age.csv\")\n\n# Clean column names for easier access\ncolnames(data) &lt;- c(\"Entity\", \"Code\", \"Year\", \n                    \"Death_rate_15_19\", \"Death_rate_20_24\", \"Death_rate_25_29\", \n                    \"Death_rate_30_34\", \"Death_rate_35_39\", \"Death_rate_40_44\", \n                    \"Death_rate_45_49\", \"Death_rate_50_54\", \"Death_rate_55_59\", \n                    \"Death_rate_60_64\", \"Death_rate_65_69\", \"Death_rate_70_74\", \n                    \"Death_rate_75_79\", \"Death_rate_80_84\", \"Death_rate_over_85\")\n\n# Filter the data for the 15-19 age group and remove missing values\ndata_filtered &lt;- data %&gt;%\n  filter(!is.na(Death_rate_15_19))\n\n# Calculate the average suicide rate for each country across all years\navg_suicide_rate &lt;- data_filtered %&gt;%\n  group_by(Entity) %&gt;%\n  summarise(suscide_Rate = round(mean(Death_rate_15_19, na.rm = TRUE), 2)) %&gt;%\n  arrange(desc(suscide_Rate)) %&gt;%\n  top_n(20, suscide_Rate)\n\n# Create the bar plot with ggplot\nbar_plot &lt;- ggplot(avg_suicide_rate, aes(x = reorder(Entity, suscide_Rate), \n                                           y = suscide_Rate, \n                                           fill = suscide_Rate,\n                                           text = paste(\"Country:\", Entity, \"&lt;br&gt;Average Suicide Rate:\", suscide_Rate))) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip coordinates to make country names readable\n  scale_fill_gradient(low = \"#ffcccc\", high = \"#990000\") +  # Light red to dark red gradient\n  labs(title = \"Suicide Rates Among 15-19 Year Olds in the Top 20 Nations (All Years)\", \n       x = \"Country\", \n       y = \"Average Suicide Rate per 100,000 Population\") +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8)) +  # Adjust text angle and size\n  theme(plot.margin = margin(10, 10, 10, 40)) +  # Adjust margins\n  guides(fill = guide_legend(title = \"Suicide Rate per 100,000\"))  # Change the legend title\n\n# Convert to an interactive plot with plotly\ninteractive_plot &lt;- ggplotly(bar_plot, tooltip = \"text\")  # Use the 'text' aesthetic for tooltip\n\n# Show the interactive plot\ninteractive_plot"
  }
]